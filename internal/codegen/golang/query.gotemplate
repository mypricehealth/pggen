{{- /*gotype: github.com/mypricehealth/pggen/internal/codegen/golang.TemplatedFile*/ -}}
{{- define "gen_query" -}}

// Code generated by pggen. DO NOT EDIT.

package {{.GoPkg}}

import (
{{ range $pkg := .Imports.Get }}	"{{$pkg}}"
{{ end -}}
{{- if .IsLeader}}	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
{{- "\n" -}}
{{- end -}}
)


{{- if .IsLeader -}}
{{- "\n\n" -}}
type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
{{- range $pkgFile := .Pkg.Files -}}
{{- range $i, $q := $pkgFile.Queries }}
	{{- if ne $q.ResultKind ":string" }}
	{{- "\n\t" -}}
	{{- if $q.Doc }}{{ $q.Doc }}	{{ end -}}
	{{.Name}}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error)
	{{- "\n" -}}
	{{- end -}}
{{end -}}
{{- end -}}

{{- range $pkgFile := .Pkg.Files -}}
{{- range $i, $q := $pkgFile.Queries }}
	{{- if ne $q.ResultKind ":string" }}
	{{- "\n\t" -}}
	{{- if $q.Doc }}{{ $q.Doc }}	{{ end -}}
	Queue{{.Name}}(batch *pgx.Batch {{- $q.EmitParams }}, onResult func ({{ $q.EmitResultType }}) error, onError func (err error) error)
	{{- "\n" -}}
	{{- end -}}
{{end -}}
{{- end -}}
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
}

// NewQuerier creates a DBQuerier
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}
}

{{- range .Declarers}}{{- "\n\n" -}}{{ .Declare $.PkgPath }}{{ end -}}
{{- end -}}

{{- range $i, $q := .Queries -}}
{{- "\n\n" -}}
const {{ $q.SQLVarName }} = {{ $q.EmitPreparedSQL }}
{{- if ne $q.ResultKind ":string" }}
{{- $q.EmitParamStruct -}}
{{- $q.EmitRowStruct -}}
{{- "\n\n" -}}

// {{ $q.Name }} implements Querier.{{ $q.Name }}.
func (q *DBQuerier) {{ $q.Name }}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error) {
	ctx = context.WithValue(ctx, QueryName{}, "{{ $q.Name }}")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return {{ $q.EmitZeroResult }}, q.errWrap(err)
	}
{{- if $q.Executable }}
	cmdTag, err := q.conn.Exec(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return {{ $q.EmitZeroResult }}, fmt.Errorf("exec query {{ $q.Name }}: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
{{- else if eq $q.ResultKind ":rows" }}
	rows, err := q.conn.Query(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return {{ $q.EmitZeroResult }}, fmt.Errorf("rows query {{ $q.Name }}: %w", q.errWrap(err))
	}
	return rows, q.errWrap(err)
{{- else }}
	rows, err := q.conn.Query(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return {{ $q.EmitZeroResult }}, fmt.Errorf("query {{ $q.Name }}: %w", q.errWrap(err))
	}
	res, err := {{ $q.EmitCollectionFunc }}(rows, {{ $q.EmitRowToFunc }}[{{ $q.EmitSingularResultType }}])
	return res, q.errWrap(err)
{{- end }}
}

// {{ $q.Name }} implements Batcher.{{ $q.Name }}.
func (q *DBQuerier) Queue{{ $q.Name }}(batch *pgx.Batch {{- $q.EmitParams }}, onResult func ({{ $q.EmitResultType }}) error, onError func (err error) error) {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queuedQuery := batch.Queue({{ $q.SQLVarName }} {{- $q.EmitParamNames }})

{{- if $q.Executable }}
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		tag, err := br.Exec()
		if err != nil {
			if onError != nil {
				return q.errWrap(onError(err))
			}
			return q.errWrap(err)
		}

		if onResult == nil {
			return nil
		}

		return q.errWrap(onResult(tag))
	}
{{- else }}
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			if onError != nil {
				return q.errWrap(onError(err))
			}
			return q.errWrap(err)
		}

{{- if eq $q.ResultKind ":rows" }}
		if onResult == nil {
			return nil
		}

		return q.errWrap(onResult(rows))
{{- else}}
		res, err := {{ $q.EmitCollectionFunc }}(rows, {{ $q.EmitRowToFunc }}[{{ $q.EmitSingularResultType }}])
		if err != nil {
			if onError != nil {
				return q.errWrap(onError(err))
			}
			return q.errWrap(err)
		}

		if onResult == nil {
			return nil
		}

		return q.errWrap(onResult(res))
{{- end }}
	}
{{- end }}
}
{{- end }}
{{- end -}}
{{- "\n" -}}
{{ if false }}
type scanCacheKey struct {
	oid      uint32
	format   int16
	typeName string
}

var (
	plans   = make(map[scanCacheKey]pgtype.ScanPlan, 16)
	plansMu sync.RWMutex
)

func planScan(codec pgtype.Codec, fd pgconn.FieldDescription, target any) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	plan = codec.PlanScan(nil, fd.DataTypeOID, fd.Format, target)
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return plan
}

type ptrScanner[T any] struct {
	basePlan pgtype.ScanPlan
}

func (s ptrScanner[T]) Scan(src []byte, dst any) error {
	if src == nil {
		return nil
	}
	d := dst.(**T)
	*d = new(T)
	return s.basePlan.Scan(src, *d)
}

func planPtrScan[T any](codec pgtype.Codec, fd pgconn.FieldDescription, target *T) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("*%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	basePlan := planScan(codec, fd, target)
	ptrPlan := ptrScanner[T]{basePlan}
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return ptrPlan
}
{{- end -}}
{{- end -}}
