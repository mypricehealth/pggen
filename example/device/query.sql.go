// Code generated by pggen. DO NOT EDIT.

package device

import (
	"context"
	"fmt"
	"net"
	"sync"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	FindDevicesByUser(ctx context.Context, id int) ([]FindDevicesByUserRow, error)

	CompositeUser(ctx context.Context) ([]CompositeUserRow, error)

	CompositeUserOne(ctx context.Context) (User, error)

	CompositeUserOneTwoCols(ctx context.Context) (CompositeUserOneTwoColsRow, error)

	CompositeUserMany(ctx context.Context) ([]User, error)

	InsertUser(ctx context.Context, userID int, name string) (pgconn.CommandTag, error)

	InsertDevice(ctx context.Context, mac net.HardwareAddr, owner int) (pgconn.CommandTag, error)

	QueueFindDevicesByUser(batch Batcher, id int) *QueuedFindDevicesByUser

	QueueCompositeUser(batch Batcher) *QueuedCompositeUser

	QueueCompositeUserOne(batch Batcher) *QueuedCompositeUserOne

	QueueCompositeUserOneTwoCols(batch Batcher) *QueuedCompositeUserOneTwoCols

	QueueCompositeUserMany(batch Batcher) *QueuedCompositeUserMany

	QueueInsertUser(batch Batcher, userID int, name string) *QueuedInsertUser

	QueueInsertDevice(batch Batcher, mac net.HardwareAddr, owner int) *QueuedInsertDevice
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	err := registerTypes(ctx, conn)
	if err != nil {
		return nil, err
	}

	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}, nil
}

// User represents the Postgres composite type "user".
type User struct {
	ID   *int    `json:"id"`
	Name *string `json:"name"`
}

// DeviceType represents the Postgres enum "device_type".
type DeviceType string

const (
	DeviceTypeUndefined DeviceType = "undefined"
	DeviceTypePhone     DeviceType = "phone"
	DeviceTypeLaptop    DeviceType = "laptop"
	DeviceTypeIpad      DeviceType = "ipad"
	DeviceTypeDesktop   DeviceType = "desktop"
	DeviceTypeIot       DeviceType = "iot"
)

func (d DeviceType) String() string { return string(d) }

var registerOnce sync.Once
var registerErr error

func registerTypes(ctx context.Context, conn genericConn) error {
	registerOnce.Do(func() {
		typeMap := conn.TypeMap()

		pgxdecimal.Register(typeMap)
		for _, typ := range typesToRegister {
			dt, err := conn.LoadType(ctx, typ)
			if err != nil {
				registerErr = fmt.Errorf("could not register type %q: %w", typ, err)
				return
			}
			typeMap.RegisterType(dt)
		}
	})

	return registerErr
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

var _ = addTypeToRegister("public.user")

const findDevicesByUserSQL = `SELECT
  id,
  name,
  (SELECT array_agg(mac) FROM device WHERE owner = id) AS mac_addrs
FROM "user"
WHERE id = $1;`

type FindDevicesByUserRow struct {
	ID       int                                `json:"id"`
	Name     string                             `json:"name"`
	MacAddrs pgtype.FlatArray[net.HardwareAddr] `json:"mac_addrs"`
}

// FindDevicesByUser implements Querier.FindDevicesByUser.
func (q *DBQuerier) FindDevicesByUser(ctx context.Context, id int) ([]FindDevicesByUserRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "FindDevicesByUser")
	rows, err := q.conn.Query(ctx, findDevicesByUserSQL, id)
	if err != nil {
		return nil, fmt.Errorf("query FindDevicesByUser: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByName[FindDevicesByUserRow])
	return res, q.errWrap(err)
}

type QueuedFindDevicesByUser struct {
	wrapError func(err error) error
	onResult  func([]FindDevicesByUserRow) error
}

func (q *QueuedFindDevicesByUser) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedFindDevicesByUser) OnResult(onResult func([]FindDevicesByUserRow) error) {
	q.onResult = onResult
}

func (q *QueuedFindDevicesByUser) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedFindDevicesByUser) runOnResult(result []FindDevicesByUserRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// FindDevicesByUser implements Batcher.FindDevicesByUser.
func (q *DBQuerier) QueueFindDevicesByUser(batch Batcher, id int) *QueuedFindDevicesByUser {
	queued := &QueuedFindDevicesByUser{}

	queuedQuery := batch.Queue(findDevicesByUserSQL, id)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowToStructByName[FindDevicesByUserRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const compositeUserSQL = `SELECT
  d.mac,
  d.type,
  ROW (u.id, u.name)::"user" AS "user"
FROM device d
  LEFT JOIN "user" u ON u.id = d.owner;`

type CompositeUserRow struct {
	Mac  net.HardwareAddr `json:"mac"`
	Type DeviceType       `json:"type"`
	User User             `json:"user"`
}

// CompositeUser implements Querier.CompositeUser.
func (q *DBQuerier) CompositeUser(ctx context.Context) ([]CompositeUserRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "CompositeUser")
	rows, err := q.conn.Query(ctx, compositeUserSQL)
	if err != nil {
		return nil, fmt.Errorf("query CompositeUser: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByName[CompositeUserRow])
	return res, q.errWrap(err)
}

type QueuedCompositeUser struct {
	wrapError func(err error) error
	onResult  func([]CompositeUserRow) error
}

func (q *QueuedCompositeUser) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedCompositeUser) OnResult(onResult func([]CompositeUserRow) error) {
	q.onResult = onResult
}

func (q *QueuedCompositeUser) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedCompositeUser) runOnResult(result []CompositeUserRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// CompositeUser implements Batcher.CompositeUser.
func (q *DBQuerier) QueueCompositeUser(batch Batcher) *QueuedCompositeUser {
	queued := &QueuedCompositeUser{}

	queuedQuery := batch.Queue(compositeUserSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowToStructByName[CompositeUserRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const compositeUserOneSQL = `SELECT ROW (15, 'qux')::"user" AS "user";`

// CompositeUserOne implements Querier.CompositeUserOne.
func (q *DBQuerier) CompositeUserOne(ctx context.Context) (User, error) {
	ctx = context.WithValue(ctx, QueryName{}, "CompositeUserOne")
	rows, err := q.conn.Query(ctx, compositeUserOneSQL)
	if err != nil {
		return User{}, fmt.Errorf("query CompositeUserOne: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[User])
	return res, q.errWrap(err)
}

type QueuedCompositeUserOne struct {
	wrapError func(err error) error
	onResult  func(User) error
}

func (q *QueuedCompositeUserOne) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedCompositeUserOne) OnResult(onResult func(User) error) {
	q.onResult = onResult
}

func (q *QueuedCompositeUserOne) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedCompositeUserOne) runOnResult(result User) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// CompositeUserOne implements Batcher.CompositeUserOne.
func (q *DBQuerier) QueueCompositeUserOne(batch Batcher) *QueuedCompositeUserOne {
	queued := &QueuedCompositeUserOne{}

	queuedQuery := batch.Queue(compositeUserOneSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[User])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const compositeUserOneTwoColsSQL = `SELECT 1 AS num, ROW (15, 'qux')::"user" AS "user";`

type CompositeUserOneTwoColsRow struct {
	Num  int32 `json:"num"`
	User User  `json:"user"`
}

// CompositeUserOneTwoCols implements Querier.CompositeUserOneTwoCols.
func (q *DBQuerier) CompositeUserOneTwoCols(ctx context.Context) (CompositeUserOneTwoColsRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "CompositeUserOneTwoCols")
	rows, err := q.conn.Query(ctx, compositeUserOneTwoColsSQL)
	if err != nil {
		return CompositeUserOneTwoColsRow{}, fmt.Errorf("query CompositeUserOneTwoCols: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[CompositeUserOneTwoColsRow])
	return res, q.errWrap(err)
}

type QueuedCompositeUserOneTwoCols struct {
	wrapError func(err error) error
	onResult  func(CompositeUserOneTwoColsRow) error
}

func (q *QueuedCompositeUserOneTwoCols) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedCompositeUserOneTwoCols) OnResult(onResult func(CompositeUserOneTwoColsRow) error) {
	q.onResult = onResult
}

func (q *QueuedCompositeUserOneTwoCols) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedCompositeUserOneTwoCols) runOnResult(result CompositeUserOneTwoColsRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// CompositeUserOneTwoCols implements Batcher.CompositeUserOneTwoCols.
func (q *DBQuerier) QueueCompositeUserOneTwoCols(batch Batcher) *QueuedCompositeUserOneTwoCols {
	queued := &QueuedCompositeUserOneTwoCols{}

	queuedQuery := batch.Queue(compositeUserOneTwoColsSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[CompositeUserOneTwoColsRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const compositeUserManySQL = `SELECT ROW (15, 'qux')::"user" AS "user";`

// CompositeUserMany implements Querier.CompositeUserMany.
func (q *DBQuerier) CompositeUserMany(ctx context.Context) ([]User, error) {
	ctx = context.WithValue(ctx, QueryName{}, "CompositeUserMany")
	rows, err := q.conn.Query(ctx, compositeUserManySQL)
	if err != nil {
		return nil, fmt.Errorf("query CompositeUserMany: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[User])
	return res, q.errWrap(err)
}

type QueuedCompositeUserMany struct {
	wrapError func(err error) error
	onResult  func([]User) error
}

func (q *QueuedCompositeUserMany) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedCompositeUserMany) OnResult(onResult func([]User) error) {
	q.onResult = onResult
}

func (q *QueuedCompositeUserMany) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedCompositeUserMany) runOnResult(result []User) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// CompositeUserMany implements Batcher.CompositeUserMany.
func (q *DBQuerier) QueueCompositeUserMany(batch Batcher) *QueuedCompositeUserMany {
	queued := &QueuedCompositeUserMany{}

	queuedQuery := batch.Queue(compositeUserManySQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowTo[User])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const insertUserSQL = `INSERT INTO "user" (id, name)
VALUES ($1, $2);`

// InsertUser implements Querier.InsertUser.
func (q *DBQuerier) InsertUser(ctx context.Context, userID int, name string) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, QueryName{}, "InsertUser")
	cmdTag, err := q.conn.Exec(ctx, insertUserSQL, userID, name)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertUser: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
}

type QueuedInsertUser struct {
	wrapError func(err error) error
	onResult  func(pgconn.CommandTag) error
}

func (q *QueuedInsertUser) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedInsertUser) OnResult(onResult func(pgconn.CommandTag) error) {
	q.onResult = onResult
}

func (q *QueuedInsertUser) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedInsertUser) runOnResult(result pgconn.CommandTag) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// InsertUser implements Batcher.InsertUser.
func (q *DBQuerier) QueueInsertUser(batch Batcher, userID int, name string) *QueuedInsertUser {
	queued := &QueuedInsertUser{}

	queuedQuery := batch.Queue(insertUserSQL, userID, name)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		tag, err := br.Exec()
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(tag)
	}

	return queued
}

const insertDeviceSQL = `INSERT INTO device (mac, owner)
VALUES ($1, $2);`

// InsertDevice implements Querier.InsertDevice.
func (q *DBQuerier) InsertDevice(ctx context.Context, mac net.HardwareAddr, owner int) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, QueryName{}, "InsertDevice")
	cmdTag, err := q.conn.Exec(ctx, insertDeviceSQL, mac, owner)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertDevice: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
}

type QueuedInsertDevice struct {
	wrapError func(err error) error
	onResult  func(pgconn.CommandTag) error
}

func (q *QueuedInsertDevice) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedInsertDevice) OnResult(onResult func(pgconn.CommandTag) error) {
	q.onResult = onResult
}

func (q *QueuedInsertDevice) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedInsertDevice) runOnResult(result pgconn.CommandTag) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// InsertDevice implements Batcher.InsertDevice.
func (q *DBQuerier) QueueInsertDevice(batch Batcher, mac net.HardwareAddr, owner int) *QueuedInsertDevice {
	queued := &QueuedInsertDevice{}

	queuedQuery := batch.Queue(insertDeviceSQL, mac, owner)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		tag, err := br.Exec()
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(tag)
	}

	return queued
}
