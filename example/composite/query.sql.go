// Code generated by pggen. DO NOT EDIT.

package composite

import (
	"context"
	"fmt"
	"sync"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	SearchScreenshots(ctx context.Context, params SearchScreenshotsParams) ([]SearchScreenshotsRow, error)

	SearchScreenshotsOneCol(ctx context.Context, params SearchScreenshotsOneColParams) ([][]Blocks, error)

	InsertScreenshotBlocks(ctx context.Context, screenshotID int, body string) (InsertScreenshotBlocksRow, error)

	ArraysInput(ctx context.Context, arrays Arrays) (Arrays, error)

	UserEmails(ctx context.Context) (UserEmail, error)

	QueueSearchScreenshots(batch Batcher, params SearchScreenshotsParams) *QueuedSearchScreenshots

	QueueSearchScreenshotsOneCol(batch Batcher, params SearchScreenshotsOneColParams) *QueuedSearchScreenshotsOneCol

	QueueInsertScreenshotBlocks(batch Batcher, screenshotID int, body string) *QueuedInsertScreenshotBlocks

	QueueArraysInput(batch Batcher, arrays Arrays) *QueuedArraysInput

	QueueUserEmails(batch Batcher) *QueuedUserEmails
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}
}

// Arrays represents the Postgres composite type "arrays".
type Arrays struct {
	Texts  []string   `json:"texts"`
	Int8s  []*int     `json:"int8s"`
	Bools  []bool     `json:"bools"`
	Floats []*float64 `json:"floats"`
}

// Blocks represents the Postgres composite type "blocks".
type Blocks struct {
	ID           int    `json:"id"`
	ScreenshotID int    `json:"screenshot_id"`
	Body         string `json:"body"`
}

// UserEmail represents the Postgres composite type "user_email".
type UserEmail struct {
	ID    string      `json:"id"`
	Email pgtype.Text `json:"email"`
}

var registerOnce sync.Once
var registerErr error

func registerTypes(ctx context.Context, conn genericConn) error {
	registerOnce.Do(func() {
		typeMap := conn.TypeMap()

		pgxdecimal.Register(typeMap)
		for _, typ := range typesToRegister {
			dt, err := conn.LoadType(ctx, typ)
			if err != nil {
				registerErr = fmt.Errorf("could not register type %q: %w", typ, err)
				return
			}
			typeMap.RegisterType(dt)
		}
	})

	return registerErr
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

var _ = addTypeToRegister("public.arrays")

var _ = addTypeToRegister("public.blocks")

var _ = addTypeToRegister("public.user_email")

var _ = addTypeToRegister("public._blocks")

const searchScreenshotsSQL = `SELECT
  ss.id,
  array_agg(bl) AS blocks
FROM screenshots ss
  JOIN blocks bl ON bl.screenshot_id = ss.id
WHERE bl.body LIKE $1 || '%'
GROUP BY ss.id
ORDER BY ss.id
LIMIT $2 OFFSET $3;`

type SearchScreenshotsParams struct {
	Body   string `json:"Body"`
	Limit  int    `json:"Limit"`
	Offset int    `json:"Offset"`
}

type SearchScreenshotsRow struct {
	ID     int      `json:"id"`
	Blocks []Blocks `json:"blocks"`
}

// SearchScreenshots implements Querier.SearchScreenshots.
func (q *DBQuerier) SearchScreenshots(ctx context.Context, params SearchScreenshotsParams) ([]SearchScreenshotsRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "SearchScreenshots")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return nil, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, searchScreenshotsSQL, params.Body, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query SearchScreenshots: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByName[SearchScreenshotsRow])
	return res, q.errWrap(err)
}

type QueuedSearchScreenshots struct {
	wrapError func(err error) error
	onResult  func([]SearchScreenshotsRow) error
}

func (q *QueuedSearchScreenshots) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedSearchScreenshots) OnResult(onResult func([]SearchScreenshotsRow) error) {
	q.onResult = onResult
}

func (q *QueuedSearchScreenshots) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedSearchScreenshots) runOnResult(result []SearchScreenshotsRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// SearchScreenshots implements Batcher.SearchScreenshots.
func (q *DBQuerier) QueueSearchScreenshots(batch Batcher, params SearchScreenshotsParams) *QueuedSearchScreenshots {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedSearchScreenshots{}

	queuedQuery := batch.Queue(searchScreenshotsSQL, params.Body, params.Limit, params.Offset)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowToStructByName[SearchScreenshotsRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const searchScreenshotsOneColSQL = `SELECT
  array_agg(bl) AS blocks
FROM screenshots ss
  JOIN blocks bl ON bl.screenshot_id = ss.id
WHERE bl.body LIKE $1 || '%'
GROUP BY ss.id
ORDER BY ss.id
LIMIT $2 OFFSET $3;`

type SearchScreenshotsOneColParams struct {
	Body   string `json:"Body"`
	Limit  int    `json:"Limit"`
	Offset int    `json:"Offset"`
}

// SearchScreenshotsOneCol implements Querier.SearchScreenshotsOneCol.
func (q *DBQuerier) SearchScreenshotsOneCol(ctx context.Context, params SearchScreenshotsOneColParams) ([][]Blocks, error) {
	ctx = context.WithValue(ctx, QueryName{}, "SearchScreenshotsOneCol")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return nil, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, searchScreenshotsOneColSQL, params.Body, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query SearchScreenshotsOneCol: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[[]Blocks])
	return res, q.errWrap(err)
}

type QueuedSearchScreenshotsOneCol struct {
	wrapError func(err error) error
	onResult  func([][]Blocks) error
}

func (q *QueuedSearchScreenshotsOneCol) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedSearchScreenshotsOneCol) OnResult(onResult func([][]Blocks) error) {
	q.onResult = onResult
}

func (q *QueuedSearchScreenshotsOneCol) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedSearchScreenshotsOneCol) runOnResult(result [][]Blocks) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// SearchScreenshotsOneCol implements Batcher.SearchScreenshotsOneCol.
func (q *DBQuerier) QueueSearchScreenshotsOneCol(batch Batcher, params SearchScreenshotsOneColParams) *QueuedSearchScreenshotsOneCol {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedSearchScreenshotsOneCol{}

	queuedQuery := batch.Queue(searchScreenshotsOneColSQL, params.Body, params.Limit, params.Offset)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowTo[[]Blocks])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const insertScreenshotBlocksSQL = `WITH screens AS (
  INSERT INTO screenshots (id) VALUES ($1)
    ON CONFLICT DO NOTHING
)
INSERT
INTO blocks (screenshot_id, body)
VALUES ($1, $2)
RETURNING id, screenshot_id, body;`

type InsertScreenshotBlocksRow struct {
	ID           int    `json:"id"`
	ScreenshotID int    `json:"screenshot_id"`
	Body         string `json:"body"`
}

// InsertScreenshotBlocks implements Querier.InsertScreenshotBlocks.
func (q *DBQuerier) InsertScreenshotBlocks(ctx context.Context, screenshotID int, body string) (InsertScreenshotBlocksRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "InsertScreenshotBlocks")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return InsertScreenshotBlocksRow{}, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, insertScreenshotBlocksSQL, screenshotID, body)
	if err != nil {
		return InsertScreenshotBlocksRow{}, fmt.Errorf("query InsertScreenshotBlocks: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[InsertScreenshotBlocksRow])
	return res, q.errWrap(err)
}

type QueuedInsertScreenshotBlocks struct {
	wrapError func(err error) error
	onResult  func(InsertScreenshotBlocksRow) error
}

func (q *QueuedInsertScreenshotBlocks) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedInsertScreenshotBlocks) OnResult(onResult func(InsertScreenshotBlocksRow) error) {
	q.onResult = onResult
}

func (q *QueuedInsertScreenshotBlocks) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedInsertScreenshotBlocks) runOnResult(result InsertScreenshotBlocksRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// InsertScreenshotBlocks implements Batcher.InsertScreenshotBlocks.
func (q *DBQuerier) QueueInsertScreenshotBlocks(batch Batcher, screenshotID int, body string) *QueuedInsertScreenshotBlocks {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedInsertScreenshotBlocks{}

	queuedQuery := batch.Queue(insertScreenshotBlocksSQL, screenshotID, body)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[InsertScreenshotBlocksRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const arraysInputSQL = `SELECT $1::arrays;`

// ArraysInput implements Querier.ArraysInput.
func (q *DBQuerier) ArraysInput(ctx context.Context, arrays Arrays) (Arrays, error) {
	ctx = context.WithValue(ctx, QueryName{}, "ArraysInput")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return Arrays{}, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, arraysInputSQL, arrays)
	if err != nil {
		return Arrays{}, fmt.Errorf("query ArraysInput: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[Arrays])
	return res, q.errWrap(err)
}

type QueuedArraysInput struct {
	wrapError func(err error) error
	onResult  func(Arrays) error
}

func (q *QueuedArraysInput) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedArraysInput) OnResult(onResult func(Arrays) error) {
	q.onResult = onResult
}

func (q *QueuedArraysInput) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedArraysInput) runOnResult(result Arrays) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// ArraysInput implements Batcher.ArraysInput.
func (q *DBQuerier) QueueArraysInput(batch Batcher, arrays Arrays) *QueuedArraysInput {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedArraysInput{}

	queuedQuery := batch.Queue(arraysInputSQL, arrays)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[Arrays])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const userEmailsSQL = `SELECT ('foo', 'bar@example.com')::user_email;`

// UserEmails implements Querier.UserEmails.
func (q *DBQuerier) UserEmails(ctx context.Context) (UserEmail, error) {
	ctx = context.WithValue(ctx, QueryName{}, "UserEmails")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return UserEmail{}, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, userEmailsSQL)
	if err != nil {
		return UserEmail{}, fmt.Errorf("query UserEmails: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[UserEmail])
	return res, q.errWrap(err)
}

type QueuedUserEmails struct {
	wrapError func(err error) error
	onResult  func(UserEmail) error
}

func (q *QueuedUserEmails) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedUserEmails) OnResult(onResult func(UserEmail) error) {
	q.onResult = onResult
}

func (q *QueuedUserEmails) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedUserEmails) runOnResult(result UserEmail) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// UserEmails implements Batcher.UserEmails.
func (q *DBQuerier) QueueUserEmails(batch Batcher) *QueuedUserEmails {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedUserEmails{}

	queuedQuery := batch.Queue(userEmailsSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[UserEmail])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
