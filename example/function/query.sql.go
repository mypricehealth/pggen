// Code generated by pggen. DO NOT EDIT.

package function

import (
	"context"
	"fmt"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	OutParams(ctx context.Context) ([]OutParamsRow, error)

	QueueOutParams(batch Batcher) *QueuedOutParams
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadTypes(ctx context.Context, typeNames []string) ([]*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	errWrap := func(err error) error {
		return err
	}

	err := registerTypes(ctx, conn)
	if err != nil {
		return nil, errWrap(fmt.Errorf("could not register types: %w", err))
	}

	return &DBQuerier{
		conn:    conn,
		errWrap: errWrap,
	}, nil
}

// ListItem represents the Postgres composite type "list_item".
type ListItem struct {
	Name  *string `json:"name"`
	Color *string `json:"color"`
}

// ListStats represents the Postgres composite type "list_stats".
type ListStats struct {
	Val1 *string  `json:"val1"`
	Val2 []*int32 `json:"val2"`
}

func registerTypes(ctx context.Context, conn genericConn) error {
	typeMap := conn.TypeMap()

	// The work pgxdecimal.Register does involves no queries so it may as well
	// be free.
	pgxdecimal.Register(typeMap)

	// Make sure to only register the necessary types. This is really only
	// important for the frequent path of _no_ registrations necessary which
	// would cause an unnecessary extra roundtrip on every query.
	needsRegistering := make([]string, 0, len(typesToRegister))
	for _, typeName := range typesToRegister {
		_, exists := typeMap.TypeForName(typeName)
		if exists {
			continue
		}

		needsRegistering = append(needsRegistering, typeName)
	}

	if len(needsRegistering) == 0 {
		return nil
	}

	types, err := conn.LoadTypes(ctx, needsRegistering)
	if err != nil {
		return fmt.Errorf("could not register types: %w", err)
	}

	typeMap.RegisterTypes(types)

	return nil
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

var _ = addTypeToRegister("public.list_item")

var _ = addTypeToRegister("public.list_stats")

var _ = addTypeToRegister("public.list_item")
var _ = addTypeToRegister("public._list_item")

const outParamsSQL = `SELECT * FROM out_params();`

type OutParamsRow struct {
	Items []ListItem `json:"_items"`
	Stats ListStats  `json:"_stats"`
}

// OutParams implements Querier.OutParams.
func (q *DBQuerier) OutParams(ctx context.Context) ([]OutParamsRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "OutParams")
	rows, err := q.conn.Query(ctx, outParamsSQL)
	if err != nil {
		return nil, fmt.Errorf("query OutParams: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByName[OutParamsRow])
	return res, q.errWrap(err)
}

type QueuedOutParams struct {
	wrapError func(err error) error
	onResult  func([]OutParamsRow) error
}

func (q *QueuedOutParams) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedOutParams) OnResult(onResult func([]OutParamsRow) error) {
	q.onResult = onResult
}

func (q *QueuedOutParams) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedOutParams) runOnResult(result []OutParamsRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// QueueOutParams implements Querier.QueueOutParams.
func (q *DBQuerier) QueueOutParams(batch Batcher) *QueuedOutParams {
	queued := &QueuedOutParams{}

	queuedQuery := batch.Queue(outParamsSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowToStructByName[OutParamsRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
