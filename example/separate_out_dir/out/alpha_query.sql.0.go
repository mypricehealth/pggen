// Code generated by pggen. DO NOT EDIT.

package out

import (
	"context"
	"fmt"
	"sync"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	AlphaNested(ctx context.Context) (string, error)

	AlphaCompositeArray(ctx context.Context) ([]Alpha, error)

	Alpha(ctx context.Context) (string, error)

	Bravo(ctx context.Context) (string, error)

	QueueAlphaNested(batch Batcher) *QueuedAlphaNested

	QueueAlphaCompositeArray(batch Batcher) *QueuedAlphaCompositeArray

	QueueAlpha(batch Batcher) *QueuedAlpha

	QueueBravo(batch Batcher) *QueuedBravo
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}
}

// Alpha represents the Postgres composite type "alpha".
type Alpha struct {
	Key *string `json:"key"`
}

var registerOnce sync.Once
var registerErr error

func registerTypes(ctx context.Context, conn genericConn) error {
	registerOnce.Do(func() {
		typeMap := conn.TypeMap()

		pgxdecimal.Register(typeMap)
		for _, typ := range typesToRegister {
			dt, err := conn.LoadType(ctx, typ)
			if err != nil {
				registerErr = fmt.Errorf("could not register type %q: %w", typ, err)
				return
			}
			typeMap.RegisterType(dt)
		}
	})

	return registerErr
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

var _ = addTypeToRegister("public.alpha")

var _ = addTypeToRegister("public._alpha")

const alphaNestedSQL = `SELECT 'alpha_nested' as output;`

// AlphaNested implements Querier.AlphaNested.
func (q *DBQuerier) AlphaNested(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "AlphaNested")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return "", q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, alphaNestedSQL)
	if err != nil {
		return "", fmt.Errorf("query AlphaNested: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
	return res, q.errWrap(err)
}

type QueuedAlphaNested struct {
	wrapError func(err error) error
	onResult  func(string) error
}

func (q *QueuedAlphaNested) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedAlphaNested) OnResult(onResult func(string) error) {
	q.onResult = onResult
}

func (q *QueuedAlphaNested) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedAlphaNested) runOnResult(result string) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// AlphaNested implements Batcher.AlphaNested.
//
//nolint:contextcheck
func (q *DBQuerier) QueueAlphaNested(batch Batcher) *QueuedAlphaNested {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedAlphaNested{}

	queuedQuery := batch.Queue(alphaNestedSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const alphaCompositeArraySQL = `SELECT ARRAY[ROW('key')]::alpha[];`

// AlphaCompositeArray implements Querier.AlphaCompositeArray.
func (q *DBQuerier) AlphaCompositeArray(ctx context.Context) ([]Alpha, error) {
	ctx = context.WithValue(ctx, QueryName{}, "AlphaCompositeArray")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return nil, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, alphaCompositeArraySQL)
	if err != nil {
		return nil, fmt.Errorf("query AlphaCompositeArray: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[[]Alpha])
	return res, q.errWrap(err)
}

type QueuedAlphaCompositeArray struct {
	wrapError func(err error) error
	onResult  func([]Alpha) error
}

func (q *QueuedAlphaCompositeArray) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedAlphaCompositeArray) OnResult(onResult func([]Alpha) error) {
	q.onResult = onResult
}

func (q *QueuedAlphaCompositeArray) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedAlphaCompositeArray) runOnResult(result []Alpha) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// AlphaCompositeArray implements Batcher.AlphaCompositeArray.
//
//nolint:contextcheck
func (q *DBQuerier) QueueAlphaCompositeArray(batch Batcher) *QueuedAlphaCompositeArray {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedAlphaCompositeArray{}

	queuedQuery := batch.Queue(alphaCompositeArraySQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[[]Alpha])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
