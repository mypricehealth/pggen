// Code generated by pggen. DO NOT EDIT.

package out

import (
	"context"
	"fmt"

	"github.com/jackc/pgx/v5"
)

const alphaSQL = `SELECT 'alpha' as output;`

// Alpha implements Querier.Alpha.
func (q *DBQuerier) Alpha(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "Alpha")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return "", q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, alphaSQL)
	if err != nil {
		return "", fmt.Errorf("query Alpha: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
	return res, q.errWrap(err)
}

// Alpha implements Batcher.Alpha.
func (q *DBQuerier) QueueAlpha(batch *pgx.Batch, onResult func(string) error, onError func(err error) error) {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queuedQuery := batch.Queue(alphaSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			if onError != nil {
				return q.errWrap(onError(err))
			}
			return q.errWrap(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
		if err != nil {
			if onError != nil {
				return q.errWrap(onError(err))
			}
			return q.errWrap(err)
		}

		if onResult == nil {
			return nil
		}

		return q.errWrap(onResult(res))
	}
}
