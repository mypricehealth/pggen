// Code generated by pggen. DO NOT EDIT.

package ltree

import (
	"context"
	"fmt"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	FindTopScienceChildren(ctx context.Context) ([]pgtype.Text, error)

	FindTopScienceChildrenAgg(ctx context.Context) (pgtype.TextArray, error)

	InsertSampleData(ctx context.Context) (pgconn.CommandTag, error)

	FindLtreeInput(ctx context.Context, inLtree pgtype.Text, inLtreeArray []string) (FindLtreeInputRow, error)

	QueueFindTopScienceChildren(batch Batcher) *QueuedFindTopScienceChildren

	QueueFindTopScienceChildrenAgg(batch Batcher) *QueuedFindTopScienceChildrenAgg

	QueueInsertSampleData(batch Batcher) *QueuedInsertSampleData

	QueueFindLtreeInput(batch Batcher, inLtree pgtype.Text, inLtreeArray []string) *QueuedFindLtreeInput
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadTypes(ctx context.Context, typeNames []string) ([]*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	errWrap := func(err error) error {
		return err
	}

	err := registerTypes(ctx, conn)
	if err != nil {
		return nil, errWrap(fmt.Errorf("could not register types: %w", err))
	}

	return &DBQuerier{
		conn:    conn,
		errWrap: errWrap,
	}, nil
}

func registerTypes(ctx context.Context, conn genericConn) error {
	typeMap := conn.TypeMap()

	// The work pgxdecimal.Register does involves no queries so it may as well
	// be free.
	pgxdecimal.Register(typeMap)

	// Make sure to only register the necessary types. This is really only
	// important for the frequent path of _no_ registrations necessary which
	// would cause an unnecessary extra roundtrip on every query.
	needsRegistering := make([]string, 0, len(typesToRegister))
	for _, typeName := range typesToRegister {
		_, exists := typeMap.TypeForName(typeName)
		if exists {
			continue
		}

		needsRegistering = append(needsRegistering, typeName)
	}

	if len(needsRegistering) == 0 {
		return nil
	}

	types, err := conn.LoadTypes(ctx, needsRegistering)
	if err != nil {
		return fmt.Errorf("could not register types: %w", err)
	}

	typeMap.RegisterTypes(types)

	return nil
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

const findTopScienceChildrenSQL = `SELECT path
FROM test
WHERE path <@ 'Top.Science';`

// FindTopScienceChildren implements Querier.FindTopScienceChildren.
func (q *DBQuerier) FindTopScienceChildren(ctx context.Context) ([]pgtype.Text, error) {
	ctx = context.WithValue(ctx, QueryName{}, "FindTopScienceChildren")
	rows, err := q.conn.Query(ctx, findTopScienceChildrenSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindTopScienceChildren: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[pgtype.Text])
	return res, q.errWrap(err)
}

type QueuedFindTopScienceChildren struct {
	wrapError func(err error) error
	onResult  func([]pgtype.Text) error
}

func (q *QueuedFindTopScienceChildren) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedFindTopScienceChildren) OnResult(onResult func([]pgtype.Text) error) {
	q.onResult = onResult
}

func (q *QueuedFindTopScienceChildren) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedFindTopScienceChildren) runOnResult(result []pgtype.Text) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// QueueFindTopScienceChildren implements Querier.QueueFindTopScienceChildren.
func (q *DBQuerier) QueueFindTopScienceChildren(batch Batcher) *QueuedFindTopScienceChildren {
	queued := &QueuedFindTopScienceChildren{}

	queuedQuery := batch.Queue(findTopScienceChildrenSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowTo[pgtype.Text])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const findTopScienceChildrenAggSQL = `SELECT array_agg(path)
FROM test
WHERE path <@ 'Top.Science';`

// FindTopScienceChildrenAgg implements Querier.FindTopScienceChildrenAgg.
func (q *DBQuerier) FindTopScienceChildrenAgg(ctx context.Context) (pgtype.TextArray, error) {
	ctx = context.WithValue(ctx, QueryName{}, "FindTopScienceChildrenAgg")
	rows, err := q.conn.Query(ctx, findTopScienceChildrenAggSQL)
	if err != nil {
		return TextArray{}, fmt.Errorf("query FindTopScienceChildrenAgg: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[pgtype.TextArray])
	return res, q.errWrap(err)
}

type QueuedFindTopScienceChildrenAgg struct {
	wrapError func(err error) error
	onResult  func(pgtype.TextArray) error
}

func (q *QueuedFindTopScienceChildrenAgg) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedFindTopScienceChildrenAgg) OnResult(onResult func(pgtype.TextArray) error) {
	q.onResult = onResult
}

func (q *QueuedFindTopScienceChildrenAgg) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedFindTopScienceChildrenAgg) runOnResult(result pgtype.TextArray) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// QueueFindTopScienceChildrenAgg implements Querier.QueueFindTopScienceChildrenAgg.
func (q *DBQuerier) QueueFindTopScienceChildrenAgg(batch Batcher) *QueuedFindTopScienceChildrenAgg {
	queued := &QueuedFindTopScienceChildrenAgg{}

	queuedQuery := batch.Queue(findTopScienceChildrenAggSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[pgtype.TextArray])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const insertSampleDataSQL = `INSERT INTO test
VALUES ('Top'),
       ('Top.Science'),
       ('Top.Science.Astronomy'),
       ('Top.Science.Astronomy.Astrophysics'),
       ('Top.Science.Astronomy.Cosmology'),
       ('Top.Hobbies'),
       ('Top.Hobbies.Amateurs_Astronomy'),
       ('Top.Collections'),
       ('Top.Collections.Pictures'),
       ('Top.Collections.Pictures.Astronomy'),
       ('Top.Collections.Pictures.Astronomy.Stars'),
       ('Top.Collections.Pictures.Astronomy.Galaxies'),
       ('Top.Collections.Pictures.Astronomy.Astronauts');`

// InsertSampleData implements Querier.InsertSampleData.
func (q *DBQuerier) InsertSampleData(ctx context.Context) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, QueryName{}, "InsertSampleData")
	cmdTag, err := q.conn.Exec(ctx, insertSampleDataSQL)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query InsertSampleData: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
}

type QueuedInsertSampleData struct {
	wrapError func(err error) error
	onResult  func(pgconn.CommandTag) error
}

func (q *QueuedInsertSampleData) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedInsertSampleData) OnResult(onResult func(pgconn.CommandTag) error) {
	q.onResult = onResult
}

func (q *QueuedInsertSampleData) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedInsertSampleData) runOnResult(result pgconn.CommandTag) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// QueueInsertSampleData implements Querier.QueueInsertSampleData.
func (q *DBQuerier) QueueInsertSampleData(batch Batcher) *QueuedInsertSampleData {
	queued := &QueuedInsertSampleData{}

	queuedQuery := batch.Queue(insertSampleDataSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		tag, err := br.Exec()
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(tag)
	}

	return queued
}

const findLtreeInputSQL = `SELECT
  $1::ltree                   AS ltree,
  -- This won't work, but I'm not quite sure why.
  -- Postgres errors with "wrong element type (SQLSTATE 42804)"
  -- All caps because we use regex to find pggen.arg and it confuses pggen.
  -- PGGEN.arg('in_ltree_array_direct')::ltree[]    AS direct_arr,

  -- The parenthesis around the text[] cast are important. They signal to pggen
  -- that we need a text array that Postgres then converts to ltree[].
  ($2::text[])::ltree[] AS text_arr;`

type FindLtreeInputRow struct {
	Ltree   pgtype.Text      `json:"ltree"`
	TextArr pgtype.TextArray `json:"text_arr"`
}

// FindLtreeInput implements Querier.FindLtreeInput.
func (q *DBQuerier) FindLtreeInput(ctx context.Context, inLtree pgtype.Text, inLtreeArray []string) (FindLtreeInputRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "FindLtreeInput")
	rows, err := q.conn.Query(ctx, findLtreeInputSQL, inLtree, inLtreeArray)
	if err != nil {
		return FindLtreeInputRow{}, fmt.Errorf("query FindLtreeInput: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[FindLtreeInputRow])
	return res, q.errWrap(err)
}

type QueuedFindLtreeInput struct {
	wrapError func(err error) error
	onResult  func(FindLtreeInputRow) error
}

func (q *QueuedFindLtreeInput) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedFindLtreeInput) OnResult(onResult func(FindLtreeInputRow) error) {
	q.onResult = onResult
}

func (q *QueuedFindLtreeInput) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedFindLtreeInput) runOnResult(result FindLtreeInputRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// QueueFindLtreeInput implements Querier.QueueFindLtreeInput.
func (q *DBQuerier) QueueFindLtreeInput(batch Batcher, inLtree pgtype.Text, inLtreeArray []string) *QueuedFindLtreeInput {
	queued := &QueuedFindLtreeInput{}

	queuedQuery := batch.Queue(findLtreeInputSQL, inLtree, inLtreeArray)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[FindLtreeInputRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
