// Code generated by pggen. DO NOT EDIT.

package nested

import (
	"context"
	"fmt"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	ArrayNested2(ctx context.Context) ([]ProductImageType, error)

	Nested3(ctx context.Context) ([]ProductImageSetType, error)

	QueueArrayNested2(batch Batcher) *QueuedArrayNested2

	QueueNested3(batch Batcher) *QueuedNested3
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadTypes(ctx context.Context, typeNames []string) ([]*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	errWrap := func(err error) error {
		return err
	}

	err := registerTypes(context.Background(), conn)
	if err != nil {
		return nil, errWrap(fmt.Errorf("could not register types: %w", err))
	}

	return &DBQuerier{
		conn:    conn,
		errWrap: errWrap,
	}, nil
}

// Dimensions represents the Postgres composite type "dimensions".
type Dimensions struct {
	Width  int `json:"width"`
	Height int `json:"height"`
}

// ProductImageSetType represents the Postgres composite type "product_image_set_type".
type ProductImageSetType struct {
	Name      string             `json:"name"`
	OrigImage ProductImageType   `json:"orig_image"`
	Images    []ProductImageType `json:"images"`
}

// ProductImageType represents the Postgres composite type "product_image_type".
type ProductImageType struct {
	Source     string     `json:"source"`
	Dimensions Dimensions `json:"dimensions"`
}

func registerTypes(ctx context.Context, conn genericConn) error {
	typeMap := conn.TypeMap()

	// The work pgxdecimal.Register does involves no queries so it may as well
	// be free.
	pgxdecimal.Register(typeMap)

	// Make sure to only register the necessary types. This is really only
	// important for the frequent path of _no_ registrations necessary which
	// would cause an unnecessary extra roundtrip on every query.
	needsRegistering := make([]string, 0, len(typesToRegister))
	for _, typeName := range typesToRegister {
		_, exists := typeMap.TypeForName(typeName)
		if exists {
			continue
		}

		needsRegistering = append(needsRegistering, typeName)
	}

	if len(needsRegistering) == 0 {
		return nil
	}

	types, err := conn.LoadTypes(ctx, needsRegistering)
	if err != nil {
		return fmt.Errorf("could not register types: %w", err)
	}

	typeMap.RegisterTypes(types)

	return nil
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

var _ = addTypeToRegister("public.dimensions")

var _ = addTypeToRegister("public.product_image_set_type")

var _ = addTypeToRegister("public.product_image_type")

var _ = addTypeToRegister("public.product_image_type")
var _ = addTypeToRegister("public._product_image_type")

const arrayNested2SQL = `SELECT
  ARRAY [
    ROW ('img2', ROW (22, 22)::dimensions)::product_image_type,
    ROW ('img3', ROW (33, 33)::dimensions)::product_image_type
    ] AS images;`

// ArrayNested2 implements Querier.ArrayNested2.
func (q *DBQuerier) ArrayNested2(ctx context.Context) ([]ProductImageType, error) {
	ctx = context.WithValue(ctx, QueryName{}, "ArrayNested2")
	rows, err := q.conn.Query(ctx, arrayNested2SQL)
	if err != nil {
		return nil, fmt.Errorf("query ArrayNested2: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[[]ProductImageType])
	return res, q.errWrap(err)
}

type QueuedArrayNested2 struct {
	wrapError func(err error) error
	onResult  func([]ProductImageType) error
}

func (q *QueuedArrayNested2) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedArrayNested2) OnResult(onResult func([]ProductImageType) error) {
	q.onResult = onResult
}

func (q *QueuedArrayNested2) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedArrayNested2) runOnResult(result []ProductImageType) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// QueueArrayNested2 implements Querier.QueueArrayNested2.
//
//nolint:contextcheck
func (q *DBQuerier) QueueArrayNested2(batch Batcher) *QueuedArrayNested2 {
	queued := &QueuedArrayNested2{}

	queuedQuery := batch.Queue(arrayNested2SQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[[]ProductImageType])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const nested3SQL = `SELECT
  ROW (
    'name', -- name
    ROW ('img1', ROW (11, 11)::dimensions)::product_image_type, -- orig_image
    ARRAY [ --images
      ROW ('img2', ROW (22, 22)::dimensions)::product_image_type,
      ROW ('img3', ROW (33, 33)::dimensions)::product_image_type
      ]
    )::product_image_set_type;`

// Nested3 implements Querier.Nested3.
func (q *DBQuerier) Nested3(ctx context.Context) ([]ProductImageSetType, error) {
	ctx = context.WithValue(ctx, QueryName{}, "Nested3")
	rows, err := q.conn.Query(ctx, nested3SQL)
	if err != nil {
		return nil, fmt.Errorf("query Nested3: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[ProductImageSetType])
	return res, q.errWrap(err)
}

type QueuedNested3 struct {
	wrapError func(err error) error
	onResult  func([]ProductImageSetType) error
}

func (q *QueuedNested3) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedNested3) OnResult(onResult func([]ProductImageSetType) error) {
	q.onResult = onResult
}

func (q *QueuedNested3) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedNested3) runOnResult(result []ProductImageSetType) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// QueueNested3 implements Querier.QueueNested3.
//
//nolint:contextcheck
func (q *DBQuerier) QueueNested3(batch Batcher) *QueuedNested3 {
	queued := &QueuedNested3{}

	queuedQuery := batch.Queue(nested3SQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowTo[ProductImageSetType])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
