// Code generated by pggen. DO NOT EDIT.

package domain

import (
	"context"
	"fmt"
	"sync"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	DomainOne(ctx context.Context) (string, error)

	QueueDomainOne(batch Batcher) *QueuedDomainOne
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	err := registerTypes(ctx, conn)
	if err != nil {
		return nil, err
	}

	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}, nil
}

var registerOnce sync.Once
var registerErr error

func registerTypes(ctx context.Context, conn genericConn) error {
	registerOnce.Do(func() {
		typeMap := conn.TypeMap()

		pgxdecimal.Register(typeMap)
		for _, typ := range typesToRegister {
			dt, err := conn.LoadType(ctx, typ)
			if err != nil {
				registerErr = fmt.Errorf("could not register type %q: %w", typ, err)
				return
			}
			typeMap.RegisterType(dt)
		}
	})

	return registerErr
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

const domainOneSQL = `SELECT '90210'::us_postal_code;`

// DomainOne implements Querier.DomainOne.
func (q *DBQuerier) DomainOne(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "DomainOne")
	rows, err := q.conn.Query(ctx, domainOneSQL)
	if err != nil {
		return "", fmt.Errorf("query DomainOne: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
	return res, q.errWrap(err)
}

type QueuedDomainOne struct {
	wrapError func(err error) error
	onResult  func(string) error
}

func (q *QueuedDomainOne) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedDomainOne) OnResult(onResult func(string) error) {
	q.onResult = onResult
}

func (q *QueuedDomainOne) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedDomainOne) runOnResult(result string) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// DomainOne implements Batcher.DomainOne.
func (q *DBQuerier) QueueDomainOne(batch Batcher) *QueuedDomainOne {
	queued := &QueuedDomainOne{}

	queuedQuery := batch.Queue(domainOneSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
