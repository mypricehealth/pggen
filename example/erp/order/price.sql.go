// Code generated by pggen. DO NOT EDIT.

package order

import (
	"context"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/shopspring/decimal"
)

const findOrdersByPriceSQL = `SELECT * FROM orders WHERE order_total > $1;`

type FindOrdersByPriceRow struct {
	OrderID    int32           `json:"order_id"`
	OrderDate  time.Time       `json:"order_date"`
	OrderTotal decimal.Decimal `json:"order_total"`
	CustomerID *int32          `json:"customer_id"`
}

// FindOrdersByPrice implements Querier.FindOrdersByPrice.
func (q *DBQuerier) FindOrdersByPrice(ctx context.Context, minTotal decimal.Decimal) ([]FindOrdersByPriceRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "FindOrdersByPrice")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return nil, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, findOrdersByPriceSQL, minTotal)
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersByPrice: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByName[FindOrdersByPriceRow])
	return res, q.errWrap(err)
}

type QueuedFindOrdersByPrice struct {
	wrapError func(err error) error
	onResult  func([]FindOrdersByPriceRow) error
}

func (q *QueuedFindOrdersByPrice) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedFindOrdersByPrice) OnResult(onResult func([]FindOrdersByPriceRow) error) {
	q.onResult = onResult
}

func (q *QueuedFindOrdersByPrice) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedFindOrdersByPrice) runOnResult(result []FindOrdersByPriceRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// FindOrdersByPrice implements Batcher.FindOrdersByPrice.
func (q *DBQuerier) QueueFindOrdersByPrice(batch *pgx.Batch, minTotal decimal.Decimal) *QueuedFindOrdersByPrice {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedFindOrdersByPrice{}

	queuedQuery := batch.Queue(findOrdersByPriceSQL, minTotal)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowToStructByName[FindOrdersByPriceRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const findOrdersMRRSQL = `SELECT date_trunc('month', order_date) AS month, sum(order_total) AS order_mrr
FROM orders
GROUP BY date_trunc('month', order_date);`

type FindOrdersMRRRow struct {
	Month    *time.Time       `json:"month"`
	OrderMRR *decimal.Decimal `json:"order_mrr"`
}

// FindOrdersMRR implements Querier.FindOrdersMRR.
func (q *DBQuerier) FindOrdersMRR(ctx context.Context) ([]FindOrdersMRRRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "FindOrdersMRR")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return nil, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, findOrdersMRRSQL)
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersMRR: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowToStructByName[FindOrdersMRRRow])
	return res, q.errWrap(err)
}

type QueuedFindOrdersMRR struct {
	wrapError func(err error) error
	onResult  func([]FindOrdersMRRRow) error
}

func (q *QueuedFindOrdersMRR) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedFindOrdersMRR) OnResult(onResult func([]FindOrdersMRRRow) error) {
	q.onResult = onResult
}

func (q *QueuedFindOrdersMRR) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedFindOrdersMRR) runOnResult(result []FindOrdersMRRRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// FindOrdersMRR implements Batcher.FindOrdersMRR.
func (q *DBQuerier) QueueFindOrdersMRR(batch *pgx.Batch) *QueuedFindOrdersMRR {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedFindOrdersMRR{}

	queuedQuery := batch.Queue(findOrdersMRRSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowToStructByName[FindOrdersMRRRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
