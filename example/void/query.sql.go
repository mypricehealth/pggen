// Code generated by pggen. DO NOT EDIT.

package void

import (
	"context"
	"fmt"
	"sync"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	VoidOnly(ctx context.Context) (pgconn.CommandTag, error)

	VoidOnlyTwoParams(ctx context.Context, id int32) (pgconn.CommandTag, error)

	VoidTwo(ctx context.Context) (string, error)

	VoidThree(ctx context.Context) (VoidThreeRow, error)

	VoidThree2(ctx context.Context) ([]string, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}
}

var registerOnce sync.Once
var registerErr error

func registerTypes(ctx context.Context, conn genericConn) error {
	registerOnce.Do(func() {
		typeMap := conn.TypeMap()

		pgxdecimal.Register(typeMap)
		for _, typ := range typesToRegister {
			dt, err := conn.LoadType(ctx, typ)
			if err != nil {
				registerErr = fmt.Errorf("could not register type %q: %w", typ, err)
				return
			}
			typeMap.RegisterType(dt)
		}
	})

	return registerErr
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

const voidOnlySQL = `SELECT void_fn();`

// VoidOnly implements Querier.VoidOnly.
func (q *DBQuerier) VoidOnly(ctx context.Context) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidOnly")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return pgconn.CommandTag{}, q.errWrap(err)
	}
	cmdTag, err := q.conn.Exec(ctx, voidOnlySQL)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query VoidOnly: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
}

const voidOnlyTwoParamsSQL = `SELECT void_fn_two_params($1, 'text');`

// VoidOnlyTwoParams implements Querier.VoidOnlyTwoParams.
func (q *DBQuerier) VoidOnlyTwoParams(ctx context.Context, id int32) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidOnlyTwoParams")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return pgconn.CommandTag{}, q.errWrap(err)
	}
	cmdTag, err := q.conn.Exec(ctx, voidOnlyTwoParamsSQL, id)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query VoidOnlyTwoParams: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
}

const voidTwoSQL = `SELECT void_fn(), 'foo' as name;`

// VoidTwo implements Querier.VoidTwo.
func (q *DBQuerier) VoidTwo(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidTwo")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return "", q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, voidTwoSQL)
	if err != nil {
		return "", fmt.Errorf("query VoidTwo: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
	return res, q.errWrap(err)
}

const voidThreeSQL = `SELECT void_fn(), 'foo' as foo, 'bar' as bar;`

type VoidThreeRow struct {
	Foo string `json:"foo"`
	Bar string `json:"bar"`
}

// VoidThree implements Querier.VoidThree.
func (q *DBQuerier) VoidThree(ctx context.Context) (VoidThreeRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidThree")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return VoidThreeRow{}, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, voidThreeSQL)
	if err != nil {
		return VoidThreeRow{}, fmt.Errorf("query VoidThree: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[VoidThreeRow])
	return res, q.errWrap(err)
}

const voidThree2SQL = `SELECT 'foo' as foo, void_fn(), void_fn();`

// VoidThree2 implements Querier.VoidThree2.
func (q *DBQuerier) VoidThree2(ctx context.Context) ([]string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidThree2")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return nil, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, voidThree2SQL)
	if err != nil {
		return nil, fmt.Errorf("query VoidThree2: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[string])
	return res, q.errWrap(err)
}
