// Code generated by pggen. DO NOT EDIT.

package void

import (
	"context"
	"fmt"
	"sync"

	pgxdecimal "github.com/jackc/pgx-shopspring-decimal"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

type QueryName struct{}

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	VoidOnly(ctx context.Context) (pgconn.CommandTag, error)

	VoidOnlyTwoParams(ctx context.Context, id int32) (pgconn.CommandTag, error)

	VoidTwo(ctx context.Context) (string, error)

	VoidThree(ctx context.Context) (VoidThreeRow, error)

	VoidThree2(ctx context.Context) ([]string, error)

	QueueVoidOnly(batch Batcher) *QueuedVoidOnly

	QueueVoidOnlyTwoParams(batch Batcher, id int32) *QueuedVoidOnlyTwoParams

	QueueVoidTwo(batch Batcher) *QueuedVoidTwo

	QueueVoidThree(batch Batcher) *QueuedVoidThree

	QueueVoidThree2(batch Batcher) *QueuedVoidThree2
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn    genericConn
	errWrap func(err error) error
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
	TypeMap() *pgtype.Map
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
}

type Batcher interface {
	Queue(query string, arguments ...any) *pgx.QueuedQuery
}

// NewQuerier creates a DBQuerier
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{
		conn: conn,
		errWrap: func(err error) error {
			return err
		},
	}
}

var registerOnce sync.Once
var registerErr error

func registerTypes(ctx context.Context, conn genericConn) error {
	registerOnce.Do(func() {
		typeMap := conn.TypeMap()

		pgxdecimal.Register(typeMap)
		for _, typ := range typesToRegister {
			dt, err := conn.LoadType(ctx, typ)
			if err != nil {
				registerErr = fmt.Errorf("could not register type %q: %w", typ, err)
				return
			}
			typeMap.RegisterType(dt)
		}
	})

	return registerErr
}

var typesToRegister = []string{}

func addTypeToRegister(typ string) struct{} {
	typesToRegister = append(typesToRegister, typ)
	return struct{}{}
}

const voidOnlySQL = `SELECT void_fn();`

// VoidOnly implements Querier.VoidOnly.
func (q *DBQuerier) VoidOnly(ctx context.Context) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidOnly")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return pgconn.CommandTag{}, q.errWrap(err)
	}
	cmdTag, err := q.conn.Exec(ctx, voidOnlySQL)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query VoidOnly: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
}

type QueuedVoidOnly struct {
	wrapError func(err error) error
	onResult  func(pgconn.CommandTag) error
}

func (q *QueuedVoidOnly) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedVoidOnly) OnResult(onResult func(pgconn.CommandTag) error) {
	q.onResult = onResult
}

func (q *QueuedVoidOnly) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedVoidOnly) runOnResult(result pgconn.CommandTag) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// VoidOnly implements Batcher.VoidOnly.
func (q *DBQuerier) QueueVoidOnly(batch Batcher) *QueuedVoidOnly {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedVoidOnly{}

	queuedQuery := batch.Queue(voidOnlySQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		tag, err := br.Exec()
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(tag)
	}

	return queued
}

const voidOnlyTwoParamsSQL = `SELECT void_fn_two_params($1, 'text');`

// VoidOnlyTwoParams implements Querier.VoidOnlyTwoParams.
func (q *DBQuerier) VoidOnlyTwoParams(ctx context.Context, id int32) (pgconn.CommandTag, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidOnlyTwoParams")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return pgconn.CommandTag{}, q.errWrap(err)
	}
	cmdTag, err := q.conn.Exec(ctx, voidOnlyTwoParamsSQL, id)
	if err != nil {
		return pgconn.CommandTag{}, fmt.Errorf("exec query VoidOnlyTwoParams: %w", q.errWrap(err))
	}
	return cmdTag, q.errWrap(err)
}

type QueuedVoidOnlyTwoParams struct {
	wrapError func(err error) error
	onResult  func(pgconn.CommandTag) error
}

func (q *QueuedVoidOnlyTwoParams) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedVoidOnlyTwoParams) OnResult(onResult func(pgconn.CommandTag) error) {
	q.onResult = onResult
}

func (q *QueuedVoidOnlyTwoParams) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedVoidOnlyTwoParams) runOnResult(result pgconn.CommandTag) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// VoidOnlyTwoParams implements Batcher.VoidOnlyTwoParams.
func (q *DBQuerier) QueueVoidOnlyTwoParams(batch Batcher, id int32) *QueuedVoidOnlyTwoParams {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedVoidOnlyTwoParams{}

	queuedQuery := batch.Queue(voidOnlyTwoParamsSQL, id)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		tag, err := br.Exec()
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(tag)
	}

	return queued
}

const voidTwoSQL = `SELECT void_fn(), 'foo' as name;`

// VoidTwo implements Querier.VoidTwo.
func (q *DBQuerier) VoidTwo(ctx context.Context) (string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidTwo")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return "", q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, voidTwoSQL)
	if err != nil {
		return "", fmt.Errorf("query VoidTwo: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
	return res, q.errWrap(err)
}

type QueuedVoidTwo struct {
	wrapError func(err error) error
	onResult  func(string) error
}

func (q *QueuedVoidTwo) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedVoidTwo) OnResult(onResult func(string) error) {
	q.onResult = onResult
}

func (q *QueuedVoidTwo) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedVoidTwo) runOnResult(result string) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// VoidTwo implements Batcher.VoidTwo.
func (q *DBQuerier) QueueVoidTwo(batch Batcher) *QueuedVoidTwo {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedVoidTwo{}

	queuedQuery := batch.Queue(voidTwoSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowTo[string])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const voidThreeSQL = `SELECT void_fn(), 'foo' as foo, 'bar' as bar;`

type VoidThreeRow struct {
	Foo string `json:"foo"`
	Bar string `json:"bar"`
}

// VoidThree implements Querier.VoidThree.
func (q *DBQuerier) VoidThree(ctx context.Context) (VoidThreeRow, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidThree")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return VoidThreeRow{}, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, voidThreeSQL)
	if err != nil {
		return VoidThreeRow{}, fmt.Errorf("query VoidThree: %w", q.errWrap(err))
	}
	res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[VoidThreeRow])
	return res, q.errWrap(err)
}

type QueuedVoidThree struct {
	wrapError func(err error) error
	onResult  func(VoidThreeRow) error
}

func (q *QueuedVoidThree) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedVoidThree) OnResult(onResult func(VoidThreeRow) error) {
	q.onResult = onResult
}

func (q *QueuedVoidThree) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedVoidThree) runOnResult(result VoidThreeRow) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// VoidThree implements Batcher.VoidThree.
func (q *DBQuerier) QueueVoidThree(batch Batcher) *QueuedVoidThree {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedVoidThree{}

	queuedQuery := batch.Queue(voidThreeSQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectExactlyOneRow(rows, pgx.RowToStructByName[VoidThreeRow])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}

const voidThree2SQL = `SELECT 'foo' as foo, void_fn(), void_fn();`

// VoidThree2 implements Querier.VoidThree2.
func (q *DBQuerier) VoidThree2(ctx context.Context) ([]string, error) {
	ctx = context.WithValue(ctx, QueryName{}, "VoidThree2")

	err := registerTypes(ctx, q.conn)
	if err != nil {
		return nil, q.errWrap(err)
	}
	rows, err := q.conn.Query(ctx, voidThree2SQL)
	if err != nil {
		return nil, fmt.Errorf("query VoidThree2: %w", q.errWrap(err))
	}
	res, err := pgx.CollectRows(rows, pgx.RowTo[string])
	return res, q.errWrap(err)
}

type QueuedVoidThree2 struct {
	wrapError func(err error) error
	onResult  func([]string) error
}

func (q *QueuedVoidThree2) WrapError(wrapError func(err error) error) {
	q.wrapError = wrapError
}

func (q *QueuedVoidThree2) OnResult(onResult func([]string) error) {
	q.onResult = onResult
}

func (q *QueuedVoidThree2) runWrapError(err error) error {
	if q.wrapError == nil {
		return err
	}

	return q.wrapError(err)
}

func (q *QueuedVoidThree2) runOnResult(result []string) error {
	if q.onResult == nil {
		return nil
	}

	return q.onResult(result)
}

// VoidThree2 implements Batcher.VoidThree2.
func (q *DBQuerier) QueueVoidThree2(batch Batcher) *QueuedVoidThree2 {
	err := registerTypes(context.Background(), q.conn)
	if err != nil {
		panic(q.errWrap(fmt.Errorf("could not register types: %w", err)))
	}

	queued := &QueuedVoidThree2{}

	queuedQuery := batch.Queue(voidThree2SQL)
	queuedQuery.Fn = func(br pgx.BatchResults) error {
		rows, err := br.Query()
		if err != nil {
			return queued.runWrapError(err)
		}
		res, err := pgx.CollectRows(rows, pgx.RowTo[string])
		if err != nil {
			return queued.runWrapError(err)
		}

		return queued.runOnResult(res)
	}

	return queued
}
